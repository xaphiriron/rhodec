TODO:
 * read input properly and hopefully not in such an imperative fashion; i'm
   still not exactly sure how to work an input loop in haskell, esp. when
   things like keyconfigs come into play
 * LIGHTING
   * something like 1/4th of the total lighting time/memory is taken up by
     calls to `turns` and `pointInQuad`
   * also lighting is horrifically slow (as one might expect)
   * consider doing a flood rayout out from each lit face instead of having
     every single visible face in the world raycast to every light. bonus:
     built-in cap for how many faces each light has to check
   * i have this idea of having a separate lighting thread that constantly
     runs until it reaches equilibria, only resuming when blocks are altered,
     but idk how well that would work
 * GEOMETRY
   * subdivide visible cells (from 4 pts to 9 pts, at least) and deform each
     point based on the surrounding cell types (currently this happens but
     only for 4pt quads, whereas i'd like to change the fundamental geometry
     to a radial triangle fan)
 * L-SYSTEMS
   * l-systems that anchor to lattice points
   * l-systems that react to the environment when they grow
 * LIQUIDS
   * probably modeled via the "spheres tied together with springs" setup.
     however that actually works.
 * COLLISION DETECTION/RESPONSE
   * it would be nice to no longer phase through the world. also: gravity
 * MAPS
   * saving the world to files and loading/unloading as needed
   * generating new chunks as needed
     * maybe just start w/ flat-out empty cells entirely full of dirt and rock
